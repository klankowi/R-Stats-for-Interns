group_by(carrier) %>%
is_extreme(dep_delay)
# There are more than 200 outliers in each group
ny.outliers %>%
group_by(carrier) %>%
is_extreme(x=dep_delay)
# Generate a demo data
set.seed(123)
demo.data <- data.frame(
sample = 1:20,
score = c(rnorm(19, mean = 5, sd = 2), 50),
gender = rep(c("Male", "Female"), each = 10)
)
# Identify outliers according to the variable score
demo.data %>%
identify_outliers(score)
# Identify outliers by groups
demo.data %>%
group_by(gender) %>%
identify_outliers("score")
head(ny.outliers)
# There are more than 200 outliers in each group
table(ny.outliers$carrier[ny.outliers$is.extreme == TRUE])
knitr::opts_chunk$set(echo = TRUE)
# Delete old data
rm(list=ls())
# Load packages, install nycflights13, rstatix, corrplot if you need to.
library(tidyverse)
library(nycflights13)
library(corrplot)
library(here)
# Adapt flight dataset
flights2 <- flights %>%
# Save only variables that we want to use
select(carrier, origin, dest, dep_delay, arr_delay,
air_time, distance, month) %>%
# Remove cancelled flights
na.omit() %>%
# Filter to summer months
filter(month ==7) %>%
# Change data type for carrier, origin, destination to factor
mutate_if(is.character, as.factor)
# Determine which airports have fewer than 50 arrivals from NYC
uncommon_airports <- flights2 %>%
# Group by destination
group_by(dest) %>%
# Summarise results: count number of arrivals to each destination
summarise(count = n()) %>%
# Filter out airports with fewer than 50 arrivals from NYC
filter(count < 50) %>%
# Remove count column
mutate(count = NULL) %>%
# Convert to a vector
pull(dest) %>%
# Remove levels that now have 0 samples
droplevels()
# Determine which carriers have fewer than 50 departures from NYC
uncommon_carriers <- flights2 %>%
# Group by carrier
group_by(carrier) %>%
# Summarize results: count number of times each carrier left NYC
summarise(count = n()) %>%
# Filter out carriers with fewer than 50 total departures from NYC
filter(count < 50) %>%
# Remove count column
mutate(count = NULL) %>%
# Convert to a vector
pull(carrier) %>%
# Remove levels that now have 0 samples
droplevels()
# Build negate function
'%notin%' <- function(x,y)!('%in%'(x,y))
# I like this function and use it a lot. It's not included in Base R.
# This is the inverse of "must include," so you can think of it as "must not include"
# Remove uncommon airports from dataset
flights2 <- flights2 %>%
filter(dest %notin% uncommon_airports)
# Remove uncommon carriers from dataset
flights2 <- flights2 %>%
filter(carrier %notin% uncommon_carriers)
# Drop levels with 0 samples
flights2 <- droplevels(flights2)
# View results
summary(flights2)
hist(flights2$arr_delay)
hist(flights2$dep_delay)
# Run spearman correlation
flights2 %>%
dplyr::select(dep_delay, arr_delay) %>%
cor(method='spearman')
# Plot data
ggplot(data=flights2) +
geom_point(aes(x=dep_delay, y=arr_delay)) +
geom_smooth(aes(x=dep_delay, y=arr_delay), method='lm',
se=FALSE) +
labs(x='Departure Delay', y='Arrival Delay')
# Trim to NY airports
lga.flights <- flights2 %>%
filter(origin == 'LGA') %>% # Select for LaGuardia
filter(carrier %in% c('AA', 'DL'))
# Identify outliers by group
ny.outliers <- lga.flights %>%
group_by(carrier) %>%
identify_outliers(dep_delay)
table(ny.outliers$carrier)
# There are more than 200 outliers in each group
table(ny.outliers$carrier[ny.outliers$is.extreme == TRUE])
# Check for normality
ny.normality <- lga.flights %>%
group_by(carrier) %>%
shapiro_test(dep_delay)
# Check for normality
lga.flights %>%
group_by(carrier) %>%
shapiro_test(dep_delay)
# Check for normality
ggplot(data=lga.flights) +
geom_histogram(dep_delay) +
facet_wrap(vars(carrier))
head(lga.flights)
# Check for normality
ggplot(data=lga.flights) +
geom_histogram(data=lga.flights, aes(y=dep_delay)) +
facet_wrap(vars(carrier))
# Check for normality
ggplot(data=lga.flights) +
geom_histogram(data=lga.flights, aes(x=dep_delay)) +
facet_wrap(vars(carrier))
# Check for normality and outliers with boxplots
ggplot(data=lga.flights) +
geom_boxplot(data=lga.flights, aes(y=dep_delay, x=carrier))
# Check for equality of variance between groups
lga.flights %>%
levene_test(dep_delay)
# Check for equality of variance between groups
lga.flights %>%
levene_test(dep_delay ~ carrier)
# Do test anyway
t.test(dep_delay ~ carrier, data=lga.flights)
# Check for normality and outliers with boxplots
ggplot(data=lga.flights) +
geom_boxplot(data=lga.flights, aes(y=dep_delay, x=carrier))
wilcox.test(dep_delay ~ carrier, data=lga.flights)
median(lga.flights$dep_delay[lga.flights$carrier == 'AA'])
median(lga.flights$dep_delay[lga.flights$carrier == 'DL'])
knitr::opts_chunk$set(echo = TRUE)
# Delete old data
rm(list=ls())
# Load packages, install nycflights13, rstatix, corrplot if you need to.
library(tidyverse)
library(nycflights13)
library(corrplot)
library(here)
# Run K-W test
kruskal.test(flights3$dep_delay,
flights3$origin)
# Run K-W test
kruskal.test(flights2$dep_delay,
flights2$origin)
knitr::opts_chunk$set(echo = TRUE)
# Delete old data
rm(list=ls())
# Load packages, install nycflights13, rstatix, corrplot if you need to.
library(tidyverse)
library(nycflights13)
library(corrplot)
library(here)
# Adapt flight dataset
flights2 <- flights %>%
# Save only variables that we want to use
select(carrier, origin, dest, dep_delay, arr_delay,
air_time, distance, month) %>%
# Remove cancelled flights
na.omit() %>%
# Filter to summer months
filter(month ==7) %>%
# Change data type for carrier, origin, destination to factor
mutate_if(is.character, as.factor)
# Determine which airports have fewer than 50 arrivals from NYC
uncommon_airports <- flights2 %>%
# Group by destination
group_by(dest) %>%
# Summarise results: count number of arrivals to each destination
summarise(count = n()) %>%
# Filter out airports with fewer than 50 arrivals from NYC
filter(count < 50) %>%
# Remove count column
mutate(count = NULL) %>%
# Convert to a vector
pull(dest) %>%
# Remove levels that now have 0 samples
droplevels()
# Determine which carriers have fewer than 50 departures from NYC
uncommon_carriers <- flights2 %>%
# Group by carrier
group_by(carrier) %>%
# Summarize results: count number of times each carrier left NYC
summarise(count = n()) %>%
# Filter out carriers with fewer than 50 total departures from NYC
filter(count < 50) %>%
# Remove count column
mutate(count = NULL) %>%
# Convert to a vector
pull(carrier) %>%
# Remove levels that now have 0 samples
droplevels()
# Build negate function
'%notin%' <- function(x,y)!('%in%'(x,y))
# I like this function and use it a lot. It's not included in Base R.
# This is the inverse of "must include," so you can think of it as "must not include"
# Remove uncommon airports from dataset
flights2 <- flights2 %>%
filter(dest %notin% uncommon_airports)
# Remove uncommon carriers from dataset
flights2 <- flights2 %>%
filter(carrier %notin% uncommon_carriers)
# Drop levels with 0 samples
flights2 <- droplevels(flights2)
# View results
summary(flights2)
hist(flights2$arr_delay)
hist(flights2$dep_delay)
# Run spearman correlation
flights2 %>%
dplyr::select(dep_delay, arr_delay) %>%
cor(method='spearman')
# Plot data
ggplot(data=flights2) +
geom_point(aes(x=dep_delay, y=arr_delay)) +
geom_smooth(aes(x=dep_delay, y=arr_delay), method='lm',
se=FALSE) +
labs(x='Departure Delay', y='Arrival Delay')
# Trim to NY airports
lga.flights <- flights2 %>%
filter(origin == 'LGA') %>% # Select for LaGuardia
filter(carrier %in% c('AA', 'DL'))
# Identify outliers by group
ny.outliers <- lga.flights %>%
group_by(carrier) %>%
identify_outliers(dep_delay)
table(ny.outliers$carrier)
# There are more than 200 outliers in each group
table(ny.outliers$carrier[ny.outliers$is.extreme == TRUE])
# And more than 150 outliers in each group should be considered extrme
# Check for normality and outliers with boxplots
ggplot(data=lga.flights) +
geom_boxplot(data=lga.flights, aes(y=dep_delay, x=carrier))
# Check for normality with shapiro-wilk test
lga.flights %>%
group_by(carrier) %>%
shapiro_test(dep_delay)
# Normality not met
# Check for equality of variance between groups
lga.flights %>%
levene_test(dep_delay ~ carrier)
# Equality of variance not met
# Do test anyway
t.test(dep_delay ~ carrier, data=lga.flights)
# Indicates significant difference
wilcox.test(dep_delay ~ carrier, data=lga.flights)
# Run K-W test
kruskal.test(flights2$dep_delay,
flights2$origin)
agricolae::kruskal(y=flights2dep_delay,
trt=flights2$origin,
alpha=0.05,
p.adj='bonferroni',
group=TRUE,
console=TRUE)
agricolae::kruskal(y=flights2$dep_delay,
trt=flights2$origin,
alpha=0.05,
p.adj='bonferroni',
group=TRUE,
console=TRUE)
# Calculate median departure delay for each carrier
lga.flights %>%
group_by(carrier) %>%
summarise(median.delay = median(dep_delay))
table(flights2$carrier[flights2$origin == 'LGA'])
table(flights2$carrier[flights2$origin == 'EWR'])
flights2 <- group_by(origin) %>% summarise(mean.dist = mean(distance))
head(flights2)
flights2 %>%  group_by(origin) %>% summarise(mean.dist = mean(distance))
ggplot(data=flights2) +
geom_boxplot(aes(x=origin, y=distance))
ggplot(data=flights2) +
geom_histogram(aes(x=distance)) +
facet_wrap(vars(origin))
ggplot(data=flights2) +
geom_histogram(aes(x=distance)) +
facet_wrap(vars(origin),
scales = "free")
table(flights2$carrier, flights2$origin)
# Trim to NY airports
ua.flights <- flights2 %>%
filter(carrier =='UA') # Filter for United
# Trim to NY airports
ua.flights <- flights2 %>%
filter(carrier =='UA') # Filter for United
# Identify outliers by group
ua.outliers <- ua.flights %>%
group_by(origin) %>%
identify_outliers(dep_delay)
table(ny.outliers$carrier)
# Trim to NY airports
ua.flights <- flights2 %>%
filter(carrier =='UA') # Filter for United
summary(ua.flights)
# Identify outliers by group
ua.outliers <- ua.flights %>%
group_by(origin) %>%
identify_outliers(dep_delay)
table(ua.outliers$origin)
# There are more than 200 outliers in each group
table(ua.outliers$origin[ua.outliers$is.extreme == TRUE])
# Check for normality and outliers with boxplots
ggplot(data=ua.flights) +
geom_boxplot(data=ua.flights, aes(y=dep_delay, x=origin))
# Check for normality with shapiro-wilk test
ua.flights %>%
group_by(origin) %>%
shapiro_test(dep_delay)
# Check for equality of variance between groups
ua.flights %>%
levene_test(dep_delay ~ origin)
# Identify outliers by group
ua.outliers <- flights2 %>%
group_by(origin) %>%
identify_outliers(dep_delay)
table(ua.outliers$origin)
# There are 50-475 outliers in each group
table(ua.outliers$origin[ua.outliers$is.extreme == TRUE])
# Check for normality and outliers with boxplots
ggplot(data=flights2) +
geom_boxplot(data=flights2, aes(y=dep_delay, x=origin))
# Check for normality with shapiro-wilk test
flights2 %>%
group_by(origin) %>%
shapiro_test(dep_delay)
table(flights2$origin)
# Check for normality and outliers with boxplots
ggplot(data=flights2) +
geom_boxplot(data=flights2, aes(y=dep_delay, x=origin))
# Check for equality of variance between groups
flights2 %>%
levene_test(dep_delay ~ origin)
# Do test anyway
aov(dep_delay ~ origin, data=flights2)
# Do test anyway
summary(aov(dep_delay ~ origin, data=flights2))
knitr::opts_chunk$set(echo = TRUE)
# Delete old data
rm(list=ls())
# Load packages, install nycflights13, rstatix, corrplot if you need to.
library(tidyverse)
library(nycflights13)
library(corrplot)
library(here)
# Adapt flight dataset
flights2 <- flights %>%
# Save only variables that we want to use
select(carrier, origin, dest, dep_delay, arr_delay,
air_time, distance, month) %>%
# Remove cancelled flights
na.omit() %>%
# Filter to summer months
filter(month ==7) %>%
# Change data type for carrier, origin, destination to factor
mutate_if(is.character, as.factor)
# Determine which airports have fewer than 50 arrivals from NYC
uncommon_airports <- flights2 %>%
# Group by destination
group_by(dest) %>%
# Summarise results: count number of arrivals to each destination
summarise(count = n()) %>%
# Filter out airports with fewer than 50 arrivals from NYC
filter(count < 50) %>%
# Remove count column
mutate(count = NULL) %>%
# Convert to a vector
pull(dest) %>%
# Remove levels that now have 0 samples
droplevels()
# Determine which carriers have fewer than 50 departures from NYC
uncommon_carriers <- flights2 %>%
# Group by carrier
group_by(carrier) %>%
# Summarize results: count number of times each carrier left NYC
summarise(count = n()) %>%
# Filter out carriers with fewer than 50 total departures from NYC
filter(count < 50) %>%
# Remove count column
mutate(count = NULL) %>%
# Convert to a vector
pull(carrier) %>%
# Remove levels that now have 0 samples
droplevels()
# Build negate function
'%notin%' <- function(x,y)!('%in%'(x,y))
# I like this function and use it a lot. It's not included in Base R.
# This is the inverse of "must include," so you can think of it as "must not include"
# Remove uncommon airports from dataset
flights2 <- flights2 %>%
filter(dest %notin% uncommon_airports)
# Remove uncommon carriers from dataset
flights2 <- flights2 %>%
filter(carrier %notin% uncommon_carriers)
# Drop levels with 0 samples
flights2 <- droplevels(flights2)
# View results
summary(flights2)
hist(flights2$arr_delay)
hist(flights2$dep_delay)
# Run spearman correlation
flights2 %>%
dplyr::select(dep_delay, arr_delay) %>%
cor(method='spearman')
# Plot data
ggplot(data=flights2) +
geom_point(aes(x=dep_delay, y=arr_delay)) +
geom_smooth(aes(x=dep_delay, y=arr_delay), method='lm',
se=FALSE) +
labs(x='Departure Delay', y='Arrival Delay')
# Trim to NY airports
lga.flights <- flights2 %>%
filter(origin == 'LGA') %>% # Select for LaGuardia
filter(carrier %in% c('AA', 'DL'))
# Identify outliers by group
ny.outliers <- lga.flights %>%
group_by(carrier) %>%
identify_outliers(dep_delay)
table(ny.outliers$carrier)
# There are more than 200 outliers in each group
table(ny.outliers$carrier[ny.outliers$is.extreme == TRUE])
# And more than 150 outliers in each group should be considered extrme
# Check for normality and outliers with boxplots
ggplot(data=lga.flights) +
geom_boxplot(data=lga.flights, aes(y=dep_delay, x=carrier))
# Check for normality with shapiro-wilk test
lga.flights %>%
group_by(carrier) %>%
shapiro_test(dep_delay)
# Normality not met
# Check for equality of variance between groups
lga.flights %>%
levene_test(dep_delay ~ carrier)
# Equality of variance not met
# Do test anyway
t.test(dep_delay ~ carrier, data=lga.flights)
# Indicates significant difference
# Run Mann-Whitney test
wilcox.test(dep_delay ~ carrier, data=lga.flights)
# Calculate median departure delay for each carrier
lga.flights %>%
group_by(carrier) %>%
summarise(median.delay = median(dep_delay))
# Identify outliers by group
ua.outliers <- flights2 %>%
group_by(origin) %>%
identify_outliers(dep_delay)
table(ua.outliers$origin)
# There are 50-475 outliers in each group
table(ua.outliers$origin[ua.outliers$is.extreme == TRUE])
# And 40-250 in each group should be considered extrme
# Check for normality and outliers with boxplots
ggplot(data=flights2) +
geom_boxplot(data=flights2, aes(y=dep_delay, x=origin))
# Normality is not a huge issue because there are so many (>5000) samples per group
# The outliers are a problem though.
# Check for equality of variance between groups
flights2 %>%
levene_test(dep_delay ~ origin)
# Equality of variance not met
# Do test anyway
summary(aov(dep_delay ~ origin, data=flights2))
# Indicates significant difference
# Run K-W test
kruskal.test(flights2$dep_delay,
flights2$origin)
agricolae::kruskal(y=flights2$dep_delay,
trt=flights2$origin,
alpha=0.05,
p.adj='bonferroni',
group=TRUE,
console=TRUE)
agricolae::kruskal(y=flights2$dep_delay,
trt=flights2$origin,
alpha=0.05,
p.adj='bonferroni',
group=TRUE,
console=TRUE)
flights2 %>% group_by(origin) %>% summarise(med.dep = median(dep_delay))
?dunn_test
dunn_test(data=flights2,
formula = dep_delay ~ origin,
p.adjust.method = "bonferroni",
detailed = TRUE)
as.data.frame(dunn_test(data=flights2,
formula = dep_delay ~ origin,
p.adjust.method = "bonferroni",
detailed = TRUE))
agricolae::kruskal(y=flights2$dep_delay,
trt=flights2$origin,
alpha=0.05,
p.adj='bonferroni',
group=TRUE,
console=TRUE)
as.data.frame(dunn_test(data=flights2,
formula = dep_delay ~ origin,
p.adjust.method = "bonferroni",
detailed = TRUE))
