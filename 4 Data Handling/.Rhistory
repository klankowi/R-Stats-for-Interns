knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
# Load packages
library(here)
library(tidyverse)
library(sf)
trips <- read.csv(here('trips_cleaned.csv'))
head(trips,3)
abund <- read.csv(here('abundance_cleaned.csv'))
head(abund,3)
bio <- read.csv(here('bio_inf_cleaned.csv'))
head(bio,3)
# First, select only necessary variables from the abundance dataframe
gc.abund <-        select(abund,         # The name of the dataframe
loc_id,        # Our identifier
species_name,  # The species caught
catch)         # The number caught of that species)
# Next, we will select only necessary variables from the trips dataframe
gc.trips <-        select(trips,        # The name of the dataframe
loc_id,       # Our identifier
substrate)    # The substrate type
# Now, we can merge these two dataframes
greencrabs <- merge(gc.trips, gc.abund, by='loc_id')
head(greencrabs)
# Subset dataframe so it only has crabs
greencrabs <- subset(greencrabs,                    # Name of dataframe
species_name == 'green crab') # Subsetting rule
# Check that there are only crabs in this dataframe
table(greencrabs$species_name)
# Check the different types of substrate possible
table(greencrabs$substrate)
# Check the number of crabs caught
summary(greencrabs$catch)
# We'll make a histogram of crabs caught for each substrate type
# Gravel
hist(greencrabs$catch[greencrabs$substrate == 'gravel'], # Subset gravel
main='Gravel',                                      # Main title
xlab='Catch')                                       # X axis name
# Sand
hist(greencrabs$catch[greencrabs$substrate == 'sand'],   # Subset sand
main='Sand',                                        # Main title
xlab='Catch')                                       # X axis name
# Gravel
hist(greencrabs$catch[greencrabs$substrate == 'mud'],    # Subset mud
main='Mud',                                         # Main title
xlab='Catch')                                       # X axis name
# Run Shapiro test on gravel substrate
shapiro.test(greencrabs$catch[greencrabs$substrate == 'gravel'])
# Run Shapiro test on sand substrate
shapiro.test(greencrabs$catch[greencrabs$substrate == 'sand'])
# Run Shapiro test on mud substrate
shapiro.test(greencrabs$catch[greencrabs$substrate == 'mud'])
sd(greencrabs$catch[greencrabs$substrate == 'gravel'])
sd(greencrabs$catch[greencrabs$substrate == 'sand'])
sd(greencrabs$catch[greencrabs$substrate == 'mud'])
sd(greencrabs$catch[greencrabs$substrate == 'gravel'], na.rm=T)
sd(greencrabs$catch[greencrabs$substrate == 'gravel'], na.rm=T)
sd(greencrabs$catch[greencrabs$substrate == 'sand'], na.rm=T)
sd(greencrabs$catch[greencrabs$substrate == 'mud'], na.rm=T)
48/2
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
# Load packages
library(here)
library(tidyverse)
library(sf)
trips <- read.csv(here('trips_cleaned.csv'))
head(trips,3)
abund <- read.csv(here('abundance_cleaned.csv'))
head(abund,3)
bio <- read.csv(here('bio_inf_cleaned.csv'))
head(bio,3)
# First, select only necessary variables from the abundance dataframe
gc.abund <-        select(abund,         # The name of the dataframe
loc_id,        # Our identifier
species_name,  # The species caught
catch)         # The number caught of that species)
# Next, we will select only necessary variables from the trips dataframe
gc.trips <-        select(trips,        # The name of the dataframe
loc_id,       # Our identifier
substrate)    # The substrate type
# Now, we can merge these two dataframes
greencrabs <- merge(gc.trips, gc.abund, by='loc_id')
head(greencrabs)
# Subset dataframe so it only has crabs
greencrabs <- subset(greencrabs,                    # Name of dataframe
species_name == 'green crab') # Subsetting rule
# Check that there are only crabs in this dataframe
table(greencrabs$species_name)
# Check the different types of substrate possible
table(greencrabs$substrate)
# Check the number of crabs caught
summary(greencrabs$catch)
# There are quicker ways to do this, but for learning purposes we will be really simple.
# We will instruct R to change the unwanted variable name to a wanted variable name.
greencrabs$substrate[greencrabs$substrate == 'mud/gravel'] <- 'mud'
table(greencrabs$substrate)
# Now all instance of 'mud/gravel' have been replaced with just 'mud'
# Repeat for other unwanted variable names
greencrabs$substrate[greencrabs$substrate == 'mud/sand'] <- 'mud'
greencrabs$substrate[greencrabs$substrate == 'mud/shell'] <- 'mud'
greencrabs$substrate[greencrabs$substrate == 'sand/gravel'] <- 'sand'
greencrabs$substrate[greencrabs$substrate == 'sand/mud/gravel'] <- 'sand'
greencrabs$substrate[greencrabs$substrate == 'sand/shell'] <- 'sand'
# Convert character-type data to factor-type
greencrabs$substrate <- as.factor(greencrabs$substrate)
# Check results
summary(greencrabs$substrate)
# There are 214 records that do not have a recorded substrate type.
# We can probably fill these in with information from other sampling days at the
# same locations, but for now we will remove them.
greencrabs <- subset(greencrabs,          # Dataframe name
!is.na(substrate))   # Remove NA values (! means "not")
boxplot(greencrabs$catch ~ greencrabs$substrate,  # Catch as y variable, substrate as x
xlab = 'Substrate',                       # X axis name
ylab = 'Catch')                           # Y axis name
# We'll make a histogram of crabs caught for each substrate type
# Gravel
hist(greencrabs$catch[greencrabs$substrate == 'gravel'], # Subset gravel
main='Gravel',                                      # Main title
xlab='Catch')                                       # X axis name
# Sand
hist(greencrabs$catch[greencrabs$substrate == 'sand'],   # Subset sand
main='Sand',                                        # Main title
xlab='Catch')                                       # X axis name
# Gravel
hist(greencrabs$catch[greencrabs$substrate == 'mud'],    # Subset mud
main='Mud',                                         # Main title
xlab='Catch')                                       # X axis name
# Run Shapiro test on gravel substrate
shapiro.test(greencrabs$catch[greencrabs$substrate == 'gravel'])
# Run Shapiro test on sand substrate
shapiro.test(greencrabs$catch[greencrabs$substrate == 'sand'])
# Run Shapiro test on mud substrate
shapiro.test(greencrabs$catch[greencrabs$substrate == 'mud'])
sd(greencrabs$catch[greencrabs$substrate == 'gravel'], na.rm=T)
sd(greencrabs$catch[greencrabs$substrate == 'sand'], na.rm=T)
sd(greencrabs$catch[greencrabs$substrate == 'mud'], na.rm=T)
rstatix::levene_test(catch ~ substrate, data=greencrabs)
# Identify outliers by group
gc.outliers <- greencrabs %>%
group_by(substrate) %>%
identify_outliers(catch)
library(rstatix)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
# Load packages
library(here)
library(tidyverse)
library(sf)
library(rstatix)
trips <- read.csv(here('trips_cleaned.csv'))
head(trips,3)
abund <- read.csv(here('abundance_cleaned.csv'))
head(abund,3)
bio <- read.csv(here('bio_inf_cleaned.csv'))
head(bio,3)
# First, select only necessary variables from the abundance dataframe
gc.abund <-        select(abund,         # The name of the dataframe
loc_id,        # Our identifier
species_name,  # The species caught
catch)         # The number caught of that species)
# Next, we will select only necessary variables from the trips dataframe
gc.trips <-        select(trips,        # The name of the dataframe
loc_id,       # Our identifier
substrate)    # The substrate type
# Now, we can merge these two dataframes
greencrabs <- merge(gc.trips, gc.abund, by='loc_id')
head(greencrabs)
# Subset dataframe so it only has crabs
greencrabs <- subset(greencrabs,                    # Name of dataframe
species_name == 'green crab') # Subsetting rule
# Check that there are only crabs in this dataframe
table(greencrabs$species_name)
# Check the different types of substrate possible
table(greencrabs$substrate)
# Check the number of crabs caught
summary(greencrabs$catch)
# There are quicker ways to do this, but for learning purposes we will be really simple.
# We will instruct R to change the unwanted variable name to a wanted variable name.
greencrabs$substrate[greencrabs$substrate == 'mud/gravel'] <- 'mud'
table(greencrabs$substrate)
# Now all instance of 'mud/gravel' have been replaced with just 'mud'
# Repeat for other unwanted variable names
greencrabs$substrate[greencrabs$substrate == 'mud/sand'] <- 'mud'
greencrabs$substrate[greencrabs$substrate == 'mud/shell'] <- 'mud'
greencrabs$substrate[greencrabs$substrate == 'sand/gravel'] <- 'sand'
greencrabs$substrate[greencrabs$substrate == 'sand/mud/gravel'] <- 'sand'
greencrabs$substrate[greencrabs$substrate == 'sand/shell'] <- 'sand'
# Convert character-type data to factor-type
greencrabs$substrate <- as.factor(greencrabs$substrate)
# Check results
summary(greencrabs$substrate)
# There are 214 records that do not have a recorded substrate type.
# We can probably fill these in with information from other sampling days at the
# same locations, but for now we will remove them.
greencrabs <- subset(greencrabs,          # Dataframe name
!is.na(substrate))   # Remove NA values (! means "not")
# Identify outliers by group
gc.outliers <- greencrabs %>%
group_by(substrate) %>%
identify_outliers(catch)
table(gc.outliers$substrate)
# There are 50-475 outliers in each group
table(gc.outliers$substrate[gc.outliers$is.extreme == TRUE])
# Check for normality and outliers with boxplots
ggplot(data=greencrabs) +
geom_boxplot(data=greencrabs, aes(y=catch, x=substrate))
table(greencrabs$substrate)
# Check for equality of variance between groups
greencrabs %>%
levene_test(catch ~ substrate)
# Check for normality and outliers with boxplots
ggplot(data=greencrabs) +
geom_boxplot(data=greencrabs, aes(y=catch, x=substrate))
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
# Load packages
library(here)
library(tidyverse)
library(sf)
library(rstatix)
trips <- read.csv(here('trips_cleaned.csv'))
head(trips,3)
abund <- read.csv(here('abundance_cleaned.csv'))
head(abund,3)
bio <- read.csv(here('bio_inf_cleaned.csv'))
head(bio,3)
# First, select only necessary variables from the abundance dataframe
gc.abund <-        select(abund,         # The name of the dataframe
loc_id,        # Our identifier
species_name,  # The species caught
catch)         # The number caught of that species)
# Next, we will select only necessary variables from the trips dataframe
gc.trips <-        select(trips,        # The name of the dataframe
loc_id,       # Our identifier
substrate)    # The substrate type
# Now, we can merge these two dataframes
greencrabs <- merge(gc.trips, gc.abund, by='loc_id')
head(greencrabs)
# Subset dataframe so it only has crabs
greencrabs <- subset(greencrabs,                    # Name of dataframe
species_name == 'green crab') # Subsetting rule
# Check that there are only crabs in this dataframe
table(greencrabs$species_name)
# Check the different types of substrate possible
table(greencrabs$substrate)
# Check the number of crabs caught
summary(greencrabs$catch)
# There are quicker ways to do this, but for learning purposes we will be really simple.
# We will instruct R to change the unwanted variable name to a wanted variable name.
greencrabs$substrate[greencrabs$substrate == 'mud/gravel'] <- 'mud'
table(greencrabs$substrate)
# Now all instance of 'mud/gravel' have been replaced with just 'mud'
# Repeat for other unwanted variable names
greencrabs$substrate[greencrabs$substrate == 'mud/sand'] <- 'mud'
greencrabs$substrate[greencrabs$substrate == 'mud/shell'] <- 'mud'
greencrabs$substrate[greencrabs$substrate == 'sand/gravel'] <- 'sand'
greencrabs$substrate[greencrabs$substrate == 'sand/mud/gravel'] <- 'sand'
greencrabs$substrate[greencrabs$substrate == 'sand/shell'] <- 'sand'
# Convert character-type data to factor-type
greencrabs$substrate <- as.factor(greencrabs$substrate)
# Check results
summary(greencrabs$substrate)
# There are 214 records that do not have a recorded substrate type.
# We can probably fill these in with information from other sampling days at the
# same locations, but for now we will remove them.
greencrabs <- subset(greencrabs,          # Dataframe name
!is.na(substrate))   # Remove NA values (! means "not")
table(greencrabs$substrate)
# View results
table(greencrabs$substrate)
# Visualize catch per substrate type with boxplot
ggplot(data=greencrabs) +
geom_boxplot(data=greencrabs, aes(y=catch, x=substrate))
# Identify outliers by group
gc.outliers <- greencrabs %>%
group_by(substrate) %>%
identify_outliers(catch)
table(gc.outliers$substrate)
# There outliers in the mud and sand groups
table(gc.outliers$substrate[gc.outliers$is.extreme == TRUE])
# And 1 mud and 5 sand observations are extreme outliers
# Check for normality and outliers with boxplots
ggplot(data=greencrabs) +
geom_boxplot(data=greencrabs, aes(y=catch, x=substrate))
# Normality is not met and is likely an issue, there are only 12 observations in the gravel group.
# Check for equality of variance between groups
greencrabs %>%
levene_test(catch ~ substrate)
# Equality of variance can be assumed
# Identify outliers by group
gc.outliers <- greencrabs %>%
group_by(substrate) %>%
identify_outliers(catch)
table(gc.outliers$substrate)
# There outliers in the mud and sand groups
table(gc.outliers$substrate[gc.outliers$is.extreme == TRUE])
# And 1 mud and 5 sand observations are extreme outliers
# Normality is not met and is likely an issue, there are only 12 observations in the gravel group.
# Check for equality of variance between groups
greencrabs %>%
levene_test(catch ~ substrate)
# Equality of variance can be assumed
table(greencrabs$substrate)
kruskal.test(greencrabs$catch ~ greencrabs$substrate)
library(dunn.test)
dunn.test(x = greencrabs$catch,        # Numeric variable
g = greencrabs$substrate,    # Categorical variable
method = "bonferroni",       # p-adjustment for multiple comparisons
list = TRUE,                 # Show us output in list format
table = FALSE)               # Do not show us output in table format
# You can play around with table vs. list for output. I think list is easier to read.
?dunn_test
dunn_test(data = greencrabs,                 # Data source
formula = catch ~ substrate,       # Comparison formula
p.adjust.method =  = "bonferroni", # p-adjustment for multiple comparisons
dunn_test(data = greencrabs,               # Data source
formula = catch ~ substrate,     # Comparison formula
p.adjust.method  = "bonferroni", # p-adjustment for multiple comparisons
detailed = TRUE
)
dunn_test(data = greencrabs,               # Data source
formula = catch ~ substrate,     # Comparison formula
p.adjust.method  = "bonferroni", # p-adjustment for multiple comparisons
detailed = TRUE
)
as.data.frame(dunn_test(data = greencrabs,               # Data source
formula = catch ~ substrate,     # Comparison formula
p.adjust.method  = "bonferroni", # p-adjustment for multiple comparisons
detailed = TRUE
))
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
# Load packages
library(here)
library(tidyverse)
library(sf)
library(rstatix)
trips <- read.csv(here('trips_cleaned.csv'))
head(trips,3)
abund <- read.csv(here('abundance_cleaned.csv'))
head(abund,3)
bio <- read.csv(here('bio_inf_cleaned.csv'))
head(bio,3)
# First, select only necessary variables from the abundance dataframe
gc.abund <-        select(abund,         # The name of the dataframe
loc_id,        # Our identifier
species_name,  # The species caught
catch)         # The number caught of that species)
# Next, we will select only necessary variables from the trips dataframe
gc.trips <-        select(trips,        # The name of the dataframe
loc_id,       # Our identifier
substrate)    # The substrate type
# Now, we can merge these two dataframes
greencrabs <- merge(gc.trips, gc.abund, by='loc_id')
head(greencrabs)
# Subset dataframe so it only has crabs
greencrabs <- subset(greencrabs,                    # Name of dataframe
species_name == 'green crab') # Subsetting rule
# Check that there are only crabs in this dataframe
table(greencrabs$species_name)
# Check the different types of substrate possible
table(greencrabs$substrate)
# Check the number of crabs caught
summary(greencrabs$catch)
# There are quicker ways to do this, but for learning purposes we will be really simple.
# We will instruct R to change the unwanted variable name to a wanted variable name.
greencrabs$substrate[greencrabs$substrate == 'mud/gravel'] <- 'mud'
table(greencrabs$substrate)
# Now all instance of 'mud/gravel' have been replaced with just 'mud'
# Repeat for other unwanted variable names
greencrabs$substrate[greencrabs$substrate == 'mud/sand'] <- 'mud'
greencrabs$substrate[greencrabs$substrate == 'mud/shell'] <- 'mud'
greencrabs$substrate[greencrabs$substrate == 'sand/gravel'] <- 'sand'
greencrabs$substrate[greencrabs$substrate == 'sand/mud/gravel'] <- 'sand'
greencrabs$substrate[greencrabs$substrate == 'sand/shell'] <- 'sand'
# Convert character-type data to factor-type
greencrabs$substrate <- as.factor(greencrabs$substrate)
# Check results
summary(greencrabs$substrate)
# There are 214 records that do not have a recorded substrate type.
# We can probably fill these in with information from other sampling days at the
# same locations, but for now we will remove them.
greencrabs <- subset(greencrabs,          # Dataframe name
!is.na(substrate))   # Remove NA values (! means "not")
# View results
table(greencrabs$substrate)
# Visualize catch per substrate type with boxplot
ggplot(data=greencrabs) +
geom_boxplot(data=greencrabs, aes(y=catch, x=substrate))
# Identify outliers by group
gc.outliers <- greencrabs %>%
group_by(substrate) %>%
identify_outliers(catch)
table(gc.outliers$substrate)
# There outliers in the mud and sand groups
table(gc.outliers$substrate[gc.outliers$is.extreme == TRUE])
# And 1 mud and 5 sand observations are extreme outliers
# Normality is not met and is likely an issue, there are only 12 observations in the gravel group.
# Check for equality of variance between groups
greencrabs %>%
levene_test(catch ~ substrate)
# Equality of variance can be assumed
kruskal.test(greencrabs$catch ~ greencrabs$substrate)
rstatix::dunn_test(data = greencrabs,               # Data source
formula = catch ~ substrate,     # Comparison formula
p.adjust.method  = "bonferroni", # p-adjustment for multiple comparisons
detailed = TRUE
)
